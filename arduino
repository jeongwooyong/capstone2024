#include <Arduino.h>
#include <U8x8lib.h> //OLED 디스플레이 라이브러리
#include <Wire.h>  
#include "MAX30105.h"  //MAX30105 심박수 센서 라이브러리 (MAX30102 호환)
#include "heartRate.h"  //심박수 계산 함수 포함된 라이브러리
#include <SoftwareSerial.h> 
#include <MFRC522.h> // RFID 라이브러리
#include "ADXL335.h" // ADXL 가속도 센서 라이브러리
#define SS_PIN 53
#define RST_PIN 5

#ifdef U8X8_HAVE_HW_SPI 
#include <SPI.h>
#endif
MFRC522 rfid(SS_PIN, RST_PIN);
MFRC522::MIFARE_Key key;
MAX30105 particleSensor;        // MAX30105 센서 객체
SoftwareSerial bluetoothSerial(2, 3); // 블루투스 통신을 위한 소프트웨어 시리얼 객체
U8X8_SSD1306_128X64_NONAME_HW_I2C u8x8(/* reset=*/ U8X8_PIN_NONE);  // SSD1306 OLED 디스플레이 객체
ADXL335 accelerometer;         // ADXL335 가속도 센서 객체

int i =0;
const byte RATE_SIZE = 4;      // 심박수 배열 크기
byte rates[RATE_SIZE];          // 심박수를 저장하는 배열
byte rateSpot = 0;              // 배열의 인덱스
long lastBeat = 0;              // 마지막 심박수 감지 시간
float beatsPerMinute;           // 분당 심박수
unsigned long previousMillis = 0; // 이전 시간 저장 변수
const long interval = 1000;     // 데이터 업데이트 간격
int beatAvg;                    // 평균 심박수
float spo2;
bool accident = false;          // 사고 여부를 나타내는 변수
static int count = 0;           // 사고를 감지하기 위한 카운트 변수
int prevSum = 990;              // 이전 가속도 값의 합
int ax, ay, az;                 // 가속도 값 저장 변수
unsigned long lastRFIDCheck = 0;
const long RFIDCheckInterval = 500; // RFID 검사 간격을 500ms로 설정

void setup() {
  Serial.begin(9600);  //시리얼 통신 초기화
  bluetoothSerial.begin(9600); // 블루투스 시리얼 통신 초기화
  Serial.println("Initializing...");
 SPI.begin();
    rfid.PCD_Init();
  u8x8.begin();  //OLED 디스플레이 초기
  u8x8.setPowerSave(0);

  if (!particleSensor.begin(Wire, I2C_SPEED_FAST)) {
    Serial.println("MAX30105 was not found. Please check wiring/power.");
    while (1);
  }
  particleSensor.setup();
  particleSensor.setPulseAmplitudeRed(0x0A);
  particleSensor.setPulseAmplitudeGreen(0);

  accelerometer.begin(); // 가속도 센서 초기화
      for (byte i = 0; i < 6; i++) key.keyByte[i] = 0xFF;

}

void loop() {
  // MAX30105 센서에서 IR 값 읽어오고 심박수 감지
  long currentMillis = millis();
  long irValue = particleSensor.getIR();
  if (currentMillis - lastRFIDCheck >= RFIDCheckInterval) {
    lastRFIDCheck = currentMillis;
    if (rfid.PICC_IsNewCardPresent() && rfid.PICC_ReadCardSerial()) {
      Serial.print("Card UID:");
        for (byte i = 0; i < rfid.uid.size; i++) {
            Serial.print(rfid.uid.uidByte[i] < 0x10 ? " 0" : " ");
            Serial.print(rfid.uid.uidByte[i], DEC);
        }
        Serial.println();
      // 카드 데이터 처리
      sendDataOverBluetooth(rfid.uid.uidByte, rfid.uid.size);
      rfid.PICC_HaltA();
      rfid.PCD_StopCrypto1();
    }
  }
  if (checkForBeat(irValue) == true) {
    // 심박수 계산
    long delta = millis() - lastBeat;
    lastBeat = millis();
    beatsPerMinute = 60 / (delta / 1000.0);
     // 심박수를 배열에 저장
    if (beatsPerMinute < 255 && beatsPerMinute > 20) {
      rates[rateSpot++] = (byte)beatsPerMinute;
      rateSpot %= RATE_SIZE;
    }
    long redValue = particleSensor.getRed();
    float ratio = (float)redValue / irValue;
    spo2 = -45.060 * (ratio * ratio) + 30.354 * ratio + 94.845;
    // 블루투스로 심박수 데이터 전송
  }

  // OLED 디스플레이에 심박수 표시
    String BPM = String(beatsPerMinute, 2);
    String SPO2 = String(spo2,2);
    u8x8.setFont(u8x8_font_chroma48medium8_r);
    //u8x8.drawString(1,1,"G_T Monitoring");
    //u8x8.drawString(1,2,"");
    u8x8.refreshDisplay(); // only required for SSD1606/7

  // 가속도 센서 데이터 읽기 및 처리
  if (millis() - previousMillis >= interval) {
    previousMillis = millis();
    accelerometer.getXYZ(&ax, &ay, &az);
    int sum = ax + ay + az;
    int adxl = sum - prevSum;
    prevSum = sum;
    Serial.print("x = ");
    Serial.print(ax);
    Serial.print(" y = ");
    Serial.print(ay);
    Serial.print(" z = ");
    Serial.print(az);
    Serial.print(", sub: ");
    Serial.println(abs(adxl));

    // 가속도 변화를 통해 사고 감지
    if (abs(adxl) > 40) {
      count = 1;
      accident = false;
      u8x8.drawString(1,7,"             ");
    } else if (abs(adxl)>10) {
      count = 0;
    } else if (abs(adxl)>300){
      count =0;
    }

    if (abs(adxl) < 35) {
      count++;
      if (count == 2) {
        accident = true;
        bluetoothSerial.println("낙상되었습니다");
        Serial.println("낙상");
        u8x8.drawString(1,7,"FALL DETECTED");
        count = 0;
      } else {
        accident = false;
        count = 0;
        u8x8.drawString(1,7,"             ");
        
      }
    }
    
    Serial.print("산소=");
    Serial.print(spo2);

    Serial.print(", BPM=");
    Serial.println(beatsPerMinute);


    if (irValue < 50000){
    Serial.print(" No finger?");
    u8x8.drawString(1,6,"NO Finger");
    u8x8.drawString(1,3,"BPM");u8x8.drawString(5,3,"         ");
    u8x8.drawString(1,4,"SPO2");u8x8.drawString(5,4,"          ");
    }
    else
    {
      u8x8.drawString(1,6,"          ");
    bluetoothSerial.print("BPM=");
    bluetoothSerial.println(beatsPerMinute);
  
    bluetoothSerial.print("산소포화도 값");
    bluetoothSerial.println(spo2);
    u8x8.drawString(1,3,"BPM");u8x8.drawString(6,3,BPM.c_str());
    u8x8.drawString(1,4,"SPO2");u8x8.drawString(6,4,SPO2.c_str());
      
    }
    Serial.println();

  }
 
    
    
  }
  void sendDataOverBluetooth(byte *buffer, byte bufferSize) {
   bluetoothSerial.print("카드=");
    for (byte i = 0; i < bufferSize; i++) {
        bluetoothSerial.print(buffer[i]); // 10진수 형태로 변경
        if (i < bufferSize - 1) {
            bluetoothSerial.print(", "); // 각 바이트를 쉼표로 구분
        }
    }
    bluetoothSerial.println();
}
